#pragma once
#include <iostream>
#include <string>

using std::string;
using std::ostream;
using std::to_string;

class Kunde
{
private:
	int id;
	string Name;
public:

	Kunde(int, string);

	int getId() const;		// asta tre sa fie const, pentru ca garanteaza ca
	void setId(int value);
	string getName() const;
	void setName(string value);

	string toString();

	friend ostream& operator<<(ostream& os, const Kunde &c);
	bool operator==(const Kunde& c1);

	//~Kunde() = default;
};
#pragma once
#include "LKW.h"

LKW::LKW(int id, string mar, string mod, string b, double g) : Auto{ id, mar, mod }
{ 
	Gesamtgewicht = g;
	Bezeichnung = b; 
}
double LKW::getMass() { return Gesamtgewicht; }
void LKW::setMass(double value) { Gesamtgewicht = value; }
string LKW::getDesignation() { return Bezeichnung; }
void LKW::setDesignation(string value) { Bezeichnung = value; }

void LKW::load(double q) //quantity
{
	Gesamtgewicht += q; // eventual try except uri pentru validare
}

void LKW::unload(double q) // quantity
{
	Gesamtgewicht -= q; // idem
}

string LKW::toString()
{
	return Auto::toString() + " " + to_string(Gesamtgewicht) + " " + Bezeichnung;
}
#pragma once
#include<string>
#include "Auto.h"
using std::to_string;
using std::string;
class LKW: public Auto // atentie la pus public aici!! ca sa se poata faca ceva type-casting
// daca nu puneam `public` aici, atunci, asa cum a zis mr. Luchian Grigore(FTW) pe stackoverflow.com:
// "class inheritance is private by default.
// When you privately inherit from a class or a struct, you explicitly say, 
//among other things, that direct conversion from a derived type to a base type 
//isn't possible. "(!!pentru ca mostenirea se face,implicit, in mod privat!!)
{
private:
	double Gesamtgewicht;
	string Bezeichnung;
public:

	// constructor
	LKW(int id, string mar, string mod, string b, double g = 0);

	double getMass();
	void setMass(double value);
	string getDesignation();
	void setDesignation(string value);

	void load(double);
	void unload(double); // cum a zis si domn' prof; se pot omite numele in forward-declarations

	string toString();

	// virtual toString(); ... de incercat si aici de vazut..

	// nu stiu sigur daca trebuie facut destructor..daca 
};
#include <iostream>
#include "Rental.h"
#include "PKW.h"
#include "LKW.h"
#include<string>
#include<vector>

using std::cin;
using std::cout;
// cum se face ca mai jos pot declara variabile de tip string si de tip vector, fara sa scriu `#include <string>`,respectiv `#include <vector>`
// i dunno... poate pot declara si lucra cu cateva chestii de baza specifice tipului, dar poate n-am acces chiar la toate functionalitatile...
// am sa le includ de siguranta
using std::string;
using std::vector;

//using namespace std;

int main()
{
    Kunde proba1{1,"John"};
    cout << proba1.toString() << '\n';

    Auto proba2{ 1,"Nissan","Navara" };
    cout << proba2.toString() << '\n';

    vector<Kunde> clients_list = { Kunde(1,"Marian"), Kunde(2,"Andrei"), Kunde(3,"Bogdan") };
    vector<Auto> vehicles_list = { Auto(1, "Dacia", "Logan"), Auto(2, "Ferrari", "Enzo"), Auto(3, "Lambo","Huracan") };
    Rental firma1(clients_list, vehicles_list);

    cout << firma1.toString();

    firma1.add_auto(Auto(firma1.getNoAutos()+ 1 \
        , "Volkswagen", "Passat"));
    cout << firma1.toString();
    firma1.add_client(Kunde(firma1.getNoClients() + 1\
        ,"Jimmy"));
    cout << firma1.toString();

    firma1.update_client(1, Kunde(1,"Mircea"));
    cout << firma1.toString();

    firma1.delete_client(2);        // eu la functia de delete si modific id ul,
    // pentr uca id ul meu reprezinta nr de ordine in lista; i know it is not properly though..
    cout << firma1.toString();
    
    firma1.add_auto(Auto(420,"Daewoo","Matiz"));
        cout << firma1.toString();

    firma1.delete_auto(1);
        cout << firma1.toString();

    LKW v1{ 121,"MAN","XF 203","nuj ce i asta", 11000.5 }; // 11 tone jumate
        //cout << "AICI::!!!!!!!!!!!!!!::"<< v1 << '\n';
        //cout << v1 << '\n';
        //cout << v1.toString() << '\n';
    
        // !!de probat aici cu functiile alea virtuale si mostenirea ( sa vezi ce se intampla cand are/cand nu are cea mai de jos (derivata) clasa o metoda care 
    // suprascrie metoda `toString` din clasa de baza(cea mai de sus clasa din ierarhia de mostenire))
    
    firma1.add_auto(v1);
        cout << firma1.toString();

    PKW v2{ 121,"Scania","Eagle", "nuj" };
    //cout << "AICI::!!!!!!!!!!!!!!::" << v2 << '\n';
        //cout << v2 << '\n';
        //cout << v2.toString() << '\n';
    
    firma1.add_auto(v2);
        cout << firma1.toString();
    
    // obs proprie: adaugand pkw uri si lkw uri intr un vector<Auto> cred ca imi
    // vor fi considerate drept `Auto` si nu altceva.. adica ma voi putea folosi 
    // doar de metode specifice unui obiect de tip `Auto`

    return 0;
}
#include "PKW.h"

PKW::PKW(int id, string mar, string mod, string s) : Auto{ id, mar, mod }
{
	Sonderausstattungen = s;
}

string PKW::getSE()const {return Sonderausstattungen;}
void PKW::setSE(string s) {Sonderausstattungen = s;}

string PKW::toString()
{
	//return Auto.toString() + Sonderausstattungen;
	//return Auto.toString(this) + Sonderausstattungen;
	return Auto::toString() + " " + Sonderausstattungen;
}
#pragma once
#include <string>
#include "Auto.h"
using std::string;
class PKW: public Auto // atentie la pus public aici!! ca sa se poata faca ceva type-casting
{
private:
	string Sonderausstattungen;
public:
	//constructor
	PKW(int, string, string, string);		//!!ATENTIE: const e illegal aici; dar evident ca e ilegal, pentru ca tu VREI sa modifici the current state of the object

	string getSE() const;					// get special equipment
	void setSE(string);				// set special equipmen

	//virtual toString(); ... de incercat si aici de vazut..
	string toString();

	//destructorul, dar cred ca se tine cont de el implicit
	//~PKW()
};
#pragma once
//template
#include "Rental.h"
vector<Kunde> Rental::getClients() { return clients; }
void Rental::setClients(vector<Kunde> value) { clients = value; }
vector<Auto> Rental::getAutos() { return autos; }
void Rental::setAutos(vector<Auto> value) { autos = value; }

Rental::Rental(vector<Kunde> clients_list, vector<Auto> vehicles_list)
{
	clients = clients_list; //noClients = 0;
	autos = vehicles_list; //noAutos = 0;
}

void Rental::add_client(Kunde c)
{
	clients.push_back(c);
}

/*
void Rental::reatribuie_id_uri(int id)
{
	int l = clients.size();
	for (int i = id - 1; i < l; i++)
		clients[i].setId(clients[i].getId() - 1);
	// exemplu: l-am sters pe cel cu id ul 3, inseamna ca l-am sters pe 
	// cel de pe pozitia 2, deci s-au translatat toti pe cate o pozitie mai la stanga
	// Asa ca, voi incepe de la index ul id si le voi decrementa fiecaruia id ul
}
*/

void Rental::delete_client(int id)
{
	/*
	clients.erase(std::remove(clients.begin(), clients.end(), c), clients.end());
	// daca toata linia asta de cod e doar ca sa sterg un element din container, atunci nu s prea folositoare stl urile astea, no offense
	// vec.erase(std::remove(vec.begin(), vec.end(), int_to_remove), vec.end());
	*/
	int l = clients.size();
	for(int i = 0; i < l; i++)
		if (clients[i].getId() == id)
		{
			clients.erase(clients.begin() + i);
			return;
		}
	// if (clients.size()) reatribuie_id_uri(id);
}

//void Rental::update_client(const Kunde &c) // grija aici cum e pasat parametrul asta ca fac mai jos o comparatie cu ajutorul operatorului ==
// ( revenind asupra comentariului, nu mai stiu EXACT ce voiam sa zic..guess explicit is almost always better than implicit; probabil ceva legat de
// functii care schimba the state of the object vs functii care nu fac asta)
void Rental::update_client(int id, Kunde new_client) // grija aici cum e pasat parametrul asta ca fac mai jos o comparatie cu ajutorul operatorului ==
// nu am asumat ca id urile sunt unice, nu se preciza
{
	int l = clients.size();
	for (int i = 1; i <= l; i++)					// indexare de la 1 la inclusiv l, pentru ca nu o sa ii cer user ului sa dea un id "0"
		if (clients[i - 1].getId() == id)			// minus 1 aici din aceleasi considerente
		{
			clients[i - 1] = new_client;
			return;
		}
}

void Rental::add_auto(Auto a)
{
	autos.push_back(a);
}

void Rental::delete_auto(int id)
{
//	autos.erase(std::remove(autos.begin(), autos.end(), a), autos.end());
	int l = autos.size();
	for (int i = 0; i < l; i++)
		if (autos[i].getId() == id)
		{
			autos.erase(autos.begin() + i);
			return;
		}

}

int Rental::getNoClients() { return clients.size(); /*return noClients;*/ }
int Rental::getNoAutos() { return autos.size(); /*return noAutos;*/ }

string Rental::toString()
{
	string de_returnat = "\n";

	string lista_masini = "LISTA MASINI\n=====================\n\n";
	int l1 = autos.size();
	for (int i = 0; i < l1; i++)
		lista_masini += autos[i].toString() + "\n";
	
	de_returnat += lista_masini + "\n\n";
	
	string lista_clienti = "LISTA CLIENTI\n===================\n\n";

	int l2 = clients.size();
	for (int i = 0; i < l2; i++)
		lista_clienti += clients[i].toString() + "\n";
	de_returnat += lista_clienti;

	de_returnat += '\n';		// vad ca merge sa adaug unui string si un singur caracter; nu trebuie neaparat sa fie array de caractere, prolly si l converteste el
	return de_returnat;
}
#pragma once
#include <vector>
#include "Auto.h"
#include "Kunde.h"
using std::vector;
class Rental
{
private:
	vector<Kunde> clients;
	vector<Auto> autos;
	// static int noAutos; // number of vehicels
	// static int noClients; // number of clients
public:

	//constructor
	Rental(vector<Kunde> clients_list, vector<Auto> vehicles_list);

	vector<Kunde> getClients();
	void setClients(vector<Kunde> value);
	vector<Auto> getAutos();
	void setAutos(vector<Auto> value);

	void add_client(Kunde c);
	void delete_client(int id);
	void update_client(int id, Kunde new_c);
	void add_auto(Auto a);
	void delete_auto(int id);

	int getNoClients();
	int getNoAutos();

	string toString();

/*
	static void reatribuie_id_uri(int id);
	void reatribuie_id_uri(int id);
*/

	//destructor
	//~Rental() = default;				// nuj daca e bn ce fac eu aici cu `default`
};

Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29926.136
MinimumVisualStudioVersion = 10.0.40219.1
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "seminar3", "seminar3.vcxproj", "{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Debug|x64.ActiveCfg = Debug|x64
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Debug|x64.Build.0 = Debug|x64
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Debug|x86.ActiveCfg = Debug|Win32
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Debug|x86.Build.0 = Debug|Win32
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Release|x64.ActiveCfg = Release|x64
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Release|x64.Build.0 = Release|x64
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Release|x86.ActiveCfg = Release|Win32
		{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}.Release|x86.Build.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {B7BFA1F2-5913-447E-A576-0FABF52E223B}
	EndGlobalSection
EndGlobal

<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <ProjectGuid>{62DFCBB7-1CF1-4706-AFF5-3C3F228E2469}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <Optimization>Disabled</Optimization>
    </ClCompile>
    <Link>
      <TargetMachine>MachineX86</TargetMachine>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Console</SubSystem>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
    </ClCompile>
    <Link>
      <TargetMachine>MachineX86</TargetMachine>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="Auto.cpp" />
    <ClCompile Include="Kunde.cpp" />
    <ClCompile Include="LKW.cpp" />
    <ClCompile Include="main.cpp" />
    <ClCompile Include="PKW.cpp" />
    <ClCompile Include="Rental.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="Auto.h" />
    <ClInclude Include="Kunde.h" />
    <ClInclude Include="LKW.h" />
    <ClInclude Include="PKW.h" />
    <ClInclude Include="Rental.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <Filter Include="Source Files">
      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
    </Filter>
    <Filter Include="Header Files">
      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
    </Filter>
    <Filter Include="Resource Files">
      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav</Extensions>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="Auto.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="Kunde.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="LKW.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="main.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="PKW.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
    <ClCompile Include="Rental.cpp">
      <Filter>Source Files</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="Auto.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="Kunde.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="LKW.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="PKW.h">
      <Filter>Header Files</Filter>
    </ClInclude>
    <ClInclude Include="Rental.h">
      <Filter>Header Files</Filter>
    </ClInclude>
  </ItemGroup>
</Project>
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup />
</Project>
#include "Auto.h"
//template

Auto::Auto(int id, string marke, string modell)
{
	this->id = id;
	Marke = marke;
	Modell = modell;
}

int Auto:: getId()const { return id; }
void Auto::setId(int value) { id = value; }
string Auto::getMarke()const { return Marke; }
void Auto::setMarke(string value) { Marke = value; }
string Auto::getModell()const { return Modell; }
void Auto::setModell(string value) { Modell = value; }

string Auto::toString()
{
	//return "";
	return to_string(id) + ": " + string(Marke) + " " + string(Modell);
}

bool Auto::operator==(const Auto& a)
{
	return id == a.getId();
}

// nu stiu daca ar fi fost mai bine, eventually sa nu fi "supraincarcat" operatorul asta, ci sa fi facut pur si simplu o metoda `string toString() const`
// am impresia ca, spre deosibre de python, nu am o gama asa de larga de cazuri in care m-as putea folosi de faptul ca eu am facut overloading la operatorul asta,
// pe cand cu o metoda `string toString()` as fi putut face mai multe...nu sunt sigur, doar am vaga impresie. Asta pentru ca operatorul asta ma ajuta doar cand am
// de-a face cu obiecte de tip `ostream`, pe cand un `string` ar fi fost mai flexibil in diferite contexte...dar din nou, nu bag mana in foc, doar am impresia
ostream& operator <<(ostream& os, const Auto& a)
{
	os << a.getId() << " " << a.getMarke() << " " << a.getModell();
	return os;
}
#pragma once
//template
#include <string>
#include <iostream>

using std::string;
using std::ostream;
using std::to_string;

class Auto
{
private:
	int id;
	string Marke;
	string Modell;
public:

	// constructor
	Auto(int, string, string );		

	// getters + setters
	int getId() const;
	void setId(int value);
	string getMarke() const;
	void setMarke(string value);
	string getModell() const;
	void setModell(string value);

	string toString();

	bool operator==(const Auto& a1);
	friend ostream& operator<<(ostream& os, const Auto& a);
	//!ATENTIE: fiecare operator cu 'considerentele' sale!
	// operatorul `<<` primeste ca prim parametru un obiect de tip `ostream`(cred ca vine de la "output stream")
	// prin urmare, devince clar ca nu poate fi "supraincarcat"("overloaded") ca membru al clasei, fiindca definit astfel
	// ar insemna ca ar avea ca prim parametru un obiect de tip `Auto` ceea ce nu e adevarat.
	// De aici si confuzia mea initiala cu erori de genul "Too few arguments" -> modificam putin codul -> "Too many argumebts" (cred)

	// ~Auto() = default;					// daca as fi scris o asa, nu stiu daca ar fi facut ce trebuie, dar probabil ca da
};
#pragma once
//template 
#include "Kunde.h"
Kunde::Kunde(int id, string name)
{
	this-> id = id;
	Name = name;	// nu am nevoie de this-> pt ca tot ce se petrece aici e case sensitive
}

int Kunde::getId()const { return id; }
void Kunde::setId(int value) { id = value; }
string Kunde::getName()const { return Name; }
void Kunde::setName(string value) { Name = value; }

string Kunde::toString()
{
	//return "";
	return to_string(id) + ": " + string(Name);
}

bool Kunde::operator==(const Kunde &c)
{
	
	//if (id == c.getId()) return true;
	//return false;
	return(id == c.getId());
}

ostream& operator<<(ostream& os, const Kunde& c)
{
	os << c.getId() << " " << c.getName();		// asta cumva baga in stream
	return os;									// si abia apoi asta returneaza stream ul(ca sa il pot combina cu alte operatii)
}
